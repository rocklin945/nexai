<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rocklin.nexai.mapper.UserMapper">
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into user
        (id,
        userAccount,
        userPassword,
        userName,
        userAvatar,
        userProfile,
        userRole)
        values
        (UUID_SHORT(),
        #{userAccount},
        #{userPassword},
        #{userName},
        #{userAvatar},
        #{userProfile},
        #{userRole})
    </insert>

    <update id="updateById">
        update user set
        <if test="userName != null">
            userName = #{userName},
        </if>
        <if test="userAvatar != null">
            userAvatar = #{userAvatar},
        </if>
        <if test="userProfile != null">
            userProfile = #{userProfile},
        </if>
        <if test="userRole != null">
            userRole = #{userRole}
        </if>
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from user where id = #{id}
    </delete>

    <select id="query" resultType="com.rocklin.nexai.model.entity.User">
        select * from user where userAccount = #{userAccount}
    </select>

    <select id="queryByPassword" resultType="com.rocklin.nexai.model.entity.User">
        select * from user where userAccount = #{userAccount} and userPassword = #{userPassword}
    </select>

    <select id="selectById" resultType="com.rocklin.nexai.model.entity.User">
        select * from user where id = #{id}
    </select>

    <select id="selectListWithLimit" resultType="com.rocklin.nexai.model.entity.User">
        select * from user 
        <where>
            <if test="req != null">
                <if test="req.id != null">
                    and id = #{req.id}
                </if>
                <if test="req.userRole != null and req.userRole != ''">
                    and userRole = #{req.userRole}
                </if>
                <if test="req.userName != null and req.userName != ''">
                    and userName like concat('%', #{req.userName}, '%')
                </if>
                <if test="req.userAccount != null and req.userAccount != ''">
                    and userAccount like concat('%', #{req.userAccount}, '%')
                </if>
                <if test="req.userProfile != null and req.userProfile != ''">
                    and userProfile like concat('%', #{req.userProfile}, '%')
                </if>
            </if>
        </where>
        <choose>
            <when test="req != null and req.sortField != null and req.sortField != ''">
                order by 
                <choose>
                    <when test="req.sortField == 'userId'">id</when>
                    <when test="req.sortField == 'userName'">userName</when>
                    <when test="req.sortField == 'userAccount'">userAccount</when>
                    <when test="req.sortField == 'userRole'">userRole</when>
                    <when test="req.sortField == 'createTime'">createTime</when>
                    <when test="req.sortField == 'updateTime'">updateTime</when>
                    <otherwise>updateTime</otherwise>
                </choose>
                <choose>
                    <when test="req.sortOrder == 'asc'">ASC</when>
                    <otherwise>DESC</otherwise>
                </choose>
            </when>
            <otherwise>
                order by updateTime DESC
            </otherwise>
        </choose>
        limit #{offset}, #{limit}
    </select>
    <select id="countTotal" resultType="long">
        select count(*) from user
        <where>
            <if test="req != null">
                <if test="req.id != null">
                    and id = #{req.id}
                </if>
                <if test="req.userRole != null and req.userRole != ''">
                    and userRole = #{req.userRole}
                </if>
                <if test="req.userName != null and req.userName != ''">
                    and userName like concat('%', #{req.userName}, '%')
                </if>
                <if test="req.userAccount != null and req.userAccount != ''">
                    and userAccount like concat('%', #{req.userAccount}, '%')
                </if>
                <if test="req.userProfile != null and req.userProfile != ''">
                    and userProfile like concat('%', #{req.userProfile}, '%')
                </if>
            </if>
        </where>
    </select>
</mapper>